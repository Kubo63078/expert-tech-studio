version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: experttech-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: experttech_studio
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - experttech-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d experttech_studio"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: experttech-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./src/backend/config/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - experttech-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Backend API (Development)
  backend:
    build:
      context: ./src/backend
      dockerfile: Dockerfile.dev
    container_name: experttech-backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/experttech_studio
      REDIS_URL: redis://redis:6379
      JWT_SECRET: dev-jwt-secret-change-in-production
      PORT: 3000
    ports:
      - "3000:3000"
    volumes:
      - ./src/backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - experttech-network
    command: npm run dev

  # Frontend (Development)
  frontend:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile.dev
    container_name: experttech-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:3000
    ports:
      - "3001:3000"
    volumes:
      - ./src/frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - experttech-network
    command: npm run dev

  # PgAdmin (Database Management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: experttech-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@experttech.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - experttech-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  experttech-network:
    driver: bridge