// ExpertTech Studio Database Schema - PostgreSQL for Supabase
// This schema is compatible with the Supabase database

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =====================================
// ENUM DEFINITIONS
// =====================================

enum UserRole {
  CLIENT
  PROJECT_MANAGER
  DEVELOPER
  ADMIN
}

enum ClientStatus {
  INITIAL
  ANALYZED
  IN_DEVELOPMENT
  LAUNCHED
  CANCELLED
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  REVIEW
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum RecommendationStatus {
  DRAFT
  PRESENTED
  ACCEPTED
  REJECTED
  IN_DEVELOPMENT
}

enum TemplateStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

// =====================================
// CORE USER MANAGEMENT
// =====================================

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  clientProfile    ClientProfile?
  recommendations  Recommendation[]
  projects         Project[]

  @@map("users")
}

// =====================================
// CLIENT MANAGEMENT
// =====================================

model ClientProfile {
  id              String       @id @default(uuid()) @db.Uuid
  userId          String       @unique
  status          ClientStatus @default(INITIAL)
  
  // Interview data
  basicInfo       Json?        // Name, age, background etc.
  expertiseInfo   Json?        // Professional expertise details
  businessGoals   Json?        // Business intentions and goals
  
  // AI Analysis results
  aiAnalysis      Json?        // AI generated insights and recommendations
  
  notes           String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  // Relations
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  recommendations Recommendation[]
  projects        Project[]

  @@map("client_profiles")
}

// =====================================
// AI RECOMMENDATION SYSTEM
// =====================================

model Recommendation {
  id                    String               @id @default(uuid()) @db.Uuid
  clientId              String               @db.Uuid
  userId                String
  
  title                 String
  description           String
  
  // Analysis results
  expertiseScore        Int                  // 0-100
  marketOpportunity     String
  businessHint          String
  personalizedInsight   String
  successProbability    String
  keyStrengths          String[]
  nextStepTeaser        String
  exclusiveValue        String
  urgencyFactor         String
  
  // Business details
  estimatedCost         Decimal?             @db.Decimal(15, 2)
  estimatedTimeWeeks    Int?
  techStack             Json?
  implementationPlan    Json?
  
  status                RecommendationStatus @default(DRAFT)
  isSelected            Boolean              @default(false)
  
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt

  // Relations
  client                ClientProfile        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user                  User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects              Project[]

  @@map("recommendations")
}

// =====================================
// BUSINESS TEMPLATES
// =====================================

model BusinessTemplate {
  id            String         @id @default(uuid()) @db.Uuid
  
  name          String
  description   String
  industry      String
  
  // Template data
  features      Json
  techStack     Json
  templateData  Json
  
  // Estimates
  estimatedCost Decimal        @db.Decimal(15, 2)
  estimatedTime Int            // weeks
  
  status        TemplateStatus @default(ACTIVE)
  version       Int            @default(1)
  
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("business_templates")
}

// =====================================
// PROJECT MANAGEMENT
// =====================================

model Project {
  id               String        @id @default(uuid()) @db.Uuid
  clientId         String        @db.Uuid
  userId           String
  recommendationId String?       @db.Uuid
  
  name             String
  description      String?
  status           ProjectStatus @default(PLANNING)
  
  // Timeline
  startDate        DateTime?
  endDate          DateTime?
  actualEndDate    DateTime?
  
  // Project details
  techStack        Json?
  features         Json?
  budget           Decimal?      @db.Decimal(15, 2)
  
  metadata         Json?
  
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  // Relations
  client           ClientProfile  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  recommendation   Recommendation? @relation(fields: [recommendationId], references: [id], onDelete: SetNull)

  @@map("projects")
}